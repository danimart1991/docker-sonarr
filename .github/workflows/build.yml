name: build

on:
  push:
    branches-ignore:
      - "dependabot/**"

jobs:
  check:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Shellcheck
        run: |
          shellcheck --version
          if [[ -d ./root ]]; then
            find "./root" -type f -print -exec shellcheck {} \;
          else
            true
          fi

  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        architecture: [linux-arm-v7, linux-arm64, linux-amd64]
    needs: [check]
    outputs:
      version: ${{ steps.prep.outputs.version }}
      branch: ${{ steps.prep.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Check if architecture exists
        id: arch_check
        run: |
          (test -f ${{ matrix.architecture }}.Dockerfile && echo ::set-output name=check::passed) || echo ::set-output name=check::failed

      - name: Set up QEMU
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/setup-qemu-action@v1.1.0

      - name: Set up Docker Buildx
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/setup-buildx-action@v1.3.0
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Login to DockerHub
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PERSONAL_TOKEN }}

      - name: Prepare
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        id: prep
        run: |
          ARCHITECTURE=${{ matrix.architecture }}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=title::${GITHUB_REPOSITORY//docker-}:${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=revision::${GITHUB_SHA}
          echo ::set-output name=source::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/${GITHUB_REF//refs\/heads\//}
          echo ::set-output name=vendor::${{ github.repository_owner }}
          echo ::set-output name=url::${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/master/README.md
          echo ::set-output name=platform::${ARCHITECTURE//-/\/}
          VERSION=$(cut -d'.' -f2,3,4,5 .VERSION)
          if [[ ${VERSION} == null ]] || [[ -z ${VERSION} ]]; then
            VERSION=$(date +"%Y%m%d%H%M%S")
          fi
          echo ::set-output name=version::${VERSION}
          BRANCH=$(cut -d'.' -f1 .VERSION)
          if [[ ${BRANCH} == null ]] || [[ -z ${BRANCH} ]]; then
            echo ::set-output name=branch::null
          else
            echo ::set-output name=branch::${BRANCH}
          fi
          echo ::set-output name=tag::${GITHUB_REPOSITORY//docker-}:${GITHUB_REF//refs\/heads\//}-${VERSION}-${GITHUB_RUN_NUMBER}-${{ matrix.architecture }}
          echo ::set-output name=package_version::${GITHUB_REF//refs\/heads\//}-${VERSION}-${GITHUB_RUN_NUMBER}

      - name: Build and push
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/build-push-action@v2.4.0
        with:
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ matrix.architecture }}.Dockerfile
          tags: |
            ${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.title }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: |
            BUILD_ARCHITECTURE=${{ matrix.architecture }}
            PACKAGE_VERSION=${{ steps.prep.outputs.package_version }}
            VERSION=${{ steps.prep.outputs.version }}
            BRANCH=${{ steps.prep.outputs.branch }}

      - name: Dive Analysis
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: "ghcr.io/${{ steps.prep.outputs.tag }}"

      - name: Run tests
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        run: |
          bash test.sh ghcr.io/${{ steps.prep.outputs.tag }}

  publish:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        registry: [docker.io, ghcr.io]
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Login to DockerHub
        if: matrix.registry == 'docker.io'
        uses: docker/login-action@v1.10.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        if: matrix.registry == 'ghcr.io'
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PERSONAL_TOKEN }}

      - name: Create manifests
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=${{ matrix.registry }}/${GITHUB_REPOSITORY//docker-/}
          TAG=${GITHUB_REF//refs\/heads\//}
          VERSION=${{ needs.build.outputs.version }}
          SOURCE=${IMAGE}:${TAG}-${VERSION//\~/-}-${GITHUB_RUN_NUMBER}
          [[ -f linux-amd64.Dockerfile ]]  && AMD64=${SOURCE}-linux-amd64
          [[ -f linux-arm64.Dockerfile ]]  && ARM64=${SOURCE}-linux-arm64
          [[ -f linux-arm-v7.Dockerfile ]] && ARMV7=${SOURCE}-linux-arm-v7
          docker manifest create ${IMAGE}:${TAG} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push ${IMAGE}:${TAG}
          docker manifest create ${IMAGE}:${TAG}-${VERSION//\~/-}-${GITHUB_RUN_NUMBER} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push ${IMAGE}:${TAG}-${VERSION//\~/-}-${GITHUB_RUN_NUMBER}
          if [[ ${GITHUB_REF//refs\/heads\//} == nightly ]]; then
            docker manifest create ${IMAGE}:latest ${AMD64} ${ARM64} ${ARMV7}
            docker manifest push ${IMAGE}:latest
          fi
